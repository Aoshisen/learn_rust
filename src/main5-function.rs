fn main() {
    println!("Hello world");

    // 使用fn 来声明函数
    //使用snake case命名规范来命名函数和变量：所有字母都是小写并使用下划线分隔单词
    // rust 中函数的申明和顺序没有关系
    // another_function(2, 4);
    //函数参数的声明,parameter,arguments 形参和实参,形参是函数定义的时候的参数，实参是函数调用的时候的参数
    //函数的参数必须声明类型
	test()
}

fn another_function(x: i32, y: i32) {
    // 在rust 中函数参数必须声明,因为rust 是静态类型语言,在声明参数的时候就定义参数类型,编译器就不需要在运行时推断参数类型
    println!("x is {}", x);
    println!("y is {}", y);
}

// 区分语句和表达式
//函数体由一系列的语句和一个可选的表达式构成 (例如 5 + 6) 如果在最后一个表达式后面加上分号，它就变成了一个语句 (rust)默认返回最后一个表达式的值,
// rust是一个基于表达式的语言
// 语句是执行一些操作但不返回值的指令
// 表达式计算并产生一个值
// 函数的定义也是一个语句,所以不能将函数的定义赋值给一个变量
// let x = (let y = 6); //error
//调用函数和调用宏也是表达式 所以可以赋值给一个变量
fn five() -> i32 {
    // 因为这个没有; 所以这是一个表达式,返回值就是这个表达式的值,
    5
}
fn test() {
    let x = five();
	// 如果一个语句 是 {} 包裹的代码块,那么这个代码块的最后一个表达式的值就是这个代码块的值 如果最后一个值是一个语句,那么这个代码块的值就是()
    let y = {
		//创建了一个块
		//这个写法也是可以的,
        let y = 10;
        y + 1
    };
    println!("x is {}", x);
    println!("y is {}", y);
}

// 函数的返回值
// 函数的返回值使用->来声明,函数的返回值不可以被命名,只能被声明类型
// 如果函数没有返回值,那么返回值类型是()
// rust 中函数的返回值是函数体中最后一个表达式的值,或者使用return关键字返回值

